import sqlite3
import telebot
from googletrans import Translator
from telebot import types
from peewee import *

translator = Translator()

bot = telebot.TeleBot("5140670637:AAG-Y2LspD5SVXFavn6TLthrRnY59EizJMo")

conn = SqliteDatabase('data_base.db')

class BaseModel(Model):
    class Meta:
        database = conn

class database_table(BaseModel):
    user_id = AutoField(column_name='user_id')
    user_name = TextField(column_name='user_name', null=True)
    user_surname = TextField(column_name='user_surname', null=True)
    username  = TextField(column_name='username', null=True)
    
    class Meta:
        table_name = 'database_table'
	
@bot.message_handler(commands=['start']) #Function for checking and creating user in database
def start_message(message):
    us_id=message.from_user.id
    us_name=message.from_user.first_name
    us_sname=message.from_user.last_name
    username=message.from_user.username
    database_table.create(user_id=us_id,user_name=us_name,user_surname=us_sname,username=username)
    user_info=database_table.get(database_table.user_id)    
    info=database_table.select().where(database_table.user_id==us_id).order_by(database_table.user_id.desc())
    info_selected=info.dicts().execute()
    for user_info in info_selected:
        if user_info.get('user_id')==us_id:
            bot.send_message(message.chat.id,"Hello, I'm Mr. Cat. I have a linguistic and philological cat's education. Now I know 12 the most popular languages.\n\n For reading the instruction tap /help")
            break            
        else:
            delite = database_table.get(database_table.user_id == us_id)
            delite.delete_instance()	    
            bot.send_message(message.chat.id,"Write me a text in any language and I will translate it.")
            break	    
            
@bot.message_handler(commands=['help']) #Function for /help
def message(message):
    bot.send_message(message.chat.id, "Instructions for use\n1. Write text in Russian, English, Arabic, Chinese (simplified), French, German, Italian, Japanese, Polish, Portuguese, Spanish or Turkish without numbers, emojis, stickers and attachments\n2. Send text\n3. Choose a translation language\n4. Your text is ready!\n5. You can click on another language button to translate this text into it\n6. You can write and send a new text to translate it\n\nCommunication Contact: @akul999.")	
		
lang_dict = {
    'ru': 'russian',
    'en': 'english',
    'ar': 'arabic',
    'zh-cn': 'chinese (simplified)',
    'fr': 'french',
    'de': 'german',
    'it': 'italian',
    'ja': 'japanese',
    'pl': 'polish',
    'pt': 'portuguese',
    'es': 'spanish',
    'tr': 'turkish',
    }	
	
lang_btns = types.InlineKeyboardMarkup(row_width=3)
rubtn = types.InlineKeyboardButton(text='russian', callback_data='ru')
enbtn = types.InlineKeyboardButton(text= 'english', callback_data= 'en')
cnbtn = types.InlineKeyboardButton(text='chinese', callback_data='zh-cn')
frbtn = types.InlineKeyboardButton(text='french', callback_data='fr')
debtn = types.InlineKeyboardButton(text='german', callback_data='de')
itbtn = types.InlineKeyboardButton(text='italian', callback_data='it')
arbtn = types.InlineKeyboardButton(text='arabic', callback_data='ar')
jabtn = types.InlineKeyboardButton(text='japanese', callback_data='ja')
plbtn = types.InlineKeyboardButton(text='polish', callback_data='pl')
ptbtn = types.InlineKeyboardButton(text='portuguese', callback_data='pt')
esbtn = types.InlineKeyboardButton(text='spanish', callback_data='es')
trbtn = types.InlineKeyboardButton(text='turkish', callback_data='tr')

lang_btns.add(rubtn,enbtn,arbtn,cnbtn,frbtn,debtn,itbtn,jabtn, plbtn,ptbtn,esbtn,trbtn)

mes = ['',0]

@bot.message_handler() #Function for understanding the text
def messager(message):
	mes[0] = message.text
	mes[1] = message.chat.id
	text=message.text
	if text.isdigit():
	    bot.send_message(message.chat.id,"I don't understand you, write only text, please")
	else:	
	    bot.send_message(message.chat.id,'Choose language for translation',reply_markup=lang_btns)
	    
	    
@bot.callback_query_handler(func=lambda call: True) #Function for translating
def callback_query(call):
	message_chat_id  = mes[1]
	message_text = mes[0]
	if call.data == 'ru':
		translated_message = translator.translate(message_text,dest='ru')
		message_send = {translated_message.text}
		bot.send_message(message_chat_id,text=message_send)

	elif call.data == 'en':
		translated_message = translator.translate(message_text,dest='en')
		message_send =  {translated_message.text}
		bot.send_message(message_chat_id,text=message_send)

	elif call.data == 'ar':
		translated_message = translator.translate(message_text,dest='ar')
		message_send = {translated_message.text}
		bot.send_message(message_chat_id, text=message_send)
	elif call.data == 'zh-cn':
		translated_message = translator.translate(message_text,dest='zh-cn')
		message_send = {translated_message.text}
		bot.send_message(message_chat_id, text=message_send)
	elif call.data == 'fr':
		translated_message = translator.translate(message_text,dest='fr')
		message_send = {translated_message.text}
		bot.send_message(message_chat_id, text=message_send)
	elif call.data == 'de':
		translated_message = translator.translate(message_text,dest='de')
		message_send = {translated_message.text}
		bot.send_message(message_chat_id, text=message_send)	
	elif call.data == 'it':
		translated_message = translator.translate(message_text,dest='it')
		message_send = {translated_message.text}
		bot.send_message(message_chat_id, text=message_send)
	elif call.data == 'ja':
		translated_message = translator.translate(message_text,dest='ja')
		message_send = {translated_message.text}
		bot.send_message(message_chat_id, text=message_send)	
	elif call.data == 'pl':
		translated_message = translator.translate(message_text,dest='pl')
		message_send = {translated_message.text}
		bot.send_message(message_chat_id, text=message_send)
	elif call.data == 'pt':
		translated_message = translator.translate(message_text,dest='pt')
		message_send = {translated_message.text}
		bot.send_message(message_chat_id, text=message_send)
	elif call.data == 'es':
		translated_message = translator.translate(message_text,dest='es')
		message_send = {translated_message.text}
		bot.send_message(message_chat_id, text=message_send)	
	elif call.data == 'tr':
		translated_message = translator.translate(message_text,dest='tr')
		message_send = {translated_message.text}
		bot.send_message(message_chat_id, text=message_send)	
    
bot.polling(none_stop=True)
