from sklearn.datasets import load_iris
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.utils import shuffle
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier

class StructuralPatternName:
    def __init__(self, x_train, y_train) -> None:
        global random_state
        self.X_train = x_train
        self.Y_train = y_train

        assert(len(self.X_train) == len(self.Y_train))

        self.pred = [LinearRegression(), SVC(gamma='auto', random_state=42), RandomForestClassifier(max_depth=5, random_state=42), KNeighborsClassifier(7)]

    def fit(self):
        for predictor in self.pred:
            predictor.fit(self.X_train, self.Y_train)

    def predict(self, x):
        y = []
        for predictor in self.pred:
            y.append(np.round(np.array(predictor.predict(x))))

        y_best, _ = np.unique(y, axis=0)
        return y_best


if __name__ == "__main__":
    data = load_iris()
    print(data.data.shape[0], data.data.shape[1])

    X_train, X_test, Y_train, Y_test = train_test_split(data.data, data.target, test_size=0.2, random_state=42, shuffle=True)
    a = StructuralPatternName(X_train, Y_train)
    a.fit()
    b = a.predict(X_test)
    print(100*sum(b == Y_test)/len(Y_test):0.1f)
